---
const { type, className, width, onClick, id } = Astro.props;
---

{
  type === "primary" ? (
    <button id={id} onclick={onClick} class={`primary ${className}`}>
      <slot />
    </button>
  ) : type === "secondary" || "secondary-inverted" ? (
    <button id={id} onclick={onClick} class={`${type} ${className}`}>
      <slot />
    </button>
  ) : (
    <button id={id} onclick={onClick} class={`tertiary ${className}`}>
      <slot />
    </button>
  )
}

<style define:vars={{ width: width || "10rem" }}>
  button {
    outline: none;
    border: none;
    background: transparent;
  }
  .primary,
  .secondary,
  .tertiary,
  .secondary-inverted {
    font-family: Manrope;
    font-size: 0.8125rem;
    font-style: normal;
    font-weight: 700;
    line-height: normal;
    letter-spacing: 0.0625rem;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 12px;
  }

  .primary {
    width: var(--width);
    height: 3rem;
    background: var(--primary);
    color: var(--white);
  }
  .secondary {
    width: var(--width);
    height: 3rem;
    flex-shrink: 0;
    border: 1px solid var(--night);
    color: var(--night);
  }
  .secondary-inverted {
    width: var(--width);
    height: 3rem;
    flex-shrink: 0;
    border: 1px solid var(--night);
    color: var(--white);
    background-color: var(--night);
  }
  .tertiary {
    opacity: 0.5;
  }
  .primary:hover {
    background: var(--primary-light);
  }
  .secondary:hover {
    border: 1px solid var(--night);
    background: var(--night);
    color: var(--white);
  }
  .secondary-inverted:hover {
    background: var(--night);
    color: var(--white);
    opacity: 0.85;
  }
  .tertiary:hover {
    color: var(--primary);
  }
</style>
